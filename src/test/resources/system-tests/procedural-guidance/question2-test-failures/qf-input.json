{
   "attemptCount":1,
   "feedback":[
      
   ],
   "showSolution":false,
   "user":{
      "id":"5fd0de0f30795372827b0f2a",
      "language":"en"
   },
   "assignment":{
      "id":"63a46930a046882a0bc1660e",
      "title":"Bag",
      "files":[
         {
            "id":"63a46930a046882a0bc1660f",
            "label":"collections",
            "extension":".zip",
            "path":"assignment/63a46930a046882a0bc1660e/files",
            "mimetype":"application/x-zip-compressed",
            "url":"https://upload.quarterfall.com/assignment/63a46930a046882a0bc1660e/files/63a46930a046882a0bc1660f.zip"
         },
         {
            "id":"63a46930a046882a0bc16610",
            "label":"test",
            "extension":".zip",
            "path":"assignment/63a46930a046882a0bc1660e/files",
            "mimetype":"application/x-zip-compressed",
            "url":"file:./src/test/resources/system-tests/procedural-guidance/question2-test-failures/test.zip"
         }
      ]
   },
   "question":{
      "id":"63a46930a046882a0bc16615",
      "text":"Based on the specification of class Bag, implement all the methods. Below you find a building stone you can use as starting point.",
      "programmingLanguage":"java"
   },
   "files":[
      
   ],
   "comment":"",
   "score":0,
   "stop":false,
   "answers":[
      "package collections;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\n\r\n/**\r\n * This class represents a bag of integers. A bag can contain duplicate elements.\r\n * The bag is not limited in the number of elements it can hold.\r\n * The number of elements in the bag is represented by its length. \r\n\r\n * External invariant:\r\n * @inv Number of elements >= 0\r\n */\r\n\r\npublic class Bag {\r\n \r\n // Internal invariant\r\n // @inv elementen.size() >= 0 \r\n private ArrayList<Integer> elements;\r\n \r\n\r\n /**\r\n * @desc Constructor \r\n * @sub Happy path {\r\n * @requires true\r\n * @ensures A new bag is instantiated, with length = 0. \r\n * }\r\n */\r\n public Bag() {\r\n\t // TODO\r\n }\r\n \r\n /**\r\n * @desc add an elem to the bag\r\n * @param elem the element to add \r\n * @sub happy path {\r\n * @requires true\r\n * @ensures new cardinality(eleml) = old cardinality(elem) + 1\r\n * @ensures the new length of the bag is the old length plus 1\r\n * @ensures returns true \r\n * }\r\n */\r\n public boolean add(int elem) {\r\n\t // TODO\r\n return false;\r\n }\r\n \r\n /**\r\n * @desc Remove elemet elem from the bag\r\n * @param elem the element to remove\r\n * @sub Happy-path {\r\n * @requires length > 0 and the bag contains n elements of elem, with n > 0\r\n * @ensures new cardinality(elem) = old cardinality(elem) - 1\r\n * @ensures length is old length minus 1\r\n * @ensures returns true\r\n * }\r\n * @sub Non-happy-path {\r\n * @requires length = 0 or the bag does not contain element elem\r\n * @ensures the bag is not changed\r\n * @ensures length is old length\r\n * @ensures returns false\r\n * }\r\n */\r\n public boolean remove(int elem) {\r\n\t // TODO\r\n return false;\r\n }\r\n \r\n /**\r\n * @desc Return the number of elements in the bag\r\n * @sub {\r\n * @requires true \r\n * @ensures returns the number of elements\r\n * } \r\n */\r\n public int length() {\r\n\t // TODO\r\n return -1;\r\n } \r\n \r\n /**\r\n * @desc Determine if this bag contains exactly the same elements as bag obj.\r\n * @param obj the other bag \r\n * @sub {\r\n * @requires true\r\n * @ensures true if they contain the same elements otherwise false\r\n * } \r\n */\r\n public boolean equals(Object obj) {\r\n\t // TODO\r\n return false;\r\n }\r\n \r\n \r\n /**\r\n * @desc Get all the elements in the bag\r\n * @sub {\r\n * @requires true\r\n * @ensures returns all the elements in the bag\r\n * } \r\n */\r\n public int[] getElems() {\r\n\t // TODO\r\n return new int[0];\r\n }\r\n \r\n /**\r\n * @desc Get the cardinality of element elem in the bag\r\n * @param elem the element to determine the cardinality for\r\n * @sub {\r\n * @requires true \r\n * @ensures returns the number of element elem in the bag\r\n */\r\n public int cardinality(int elem) {\r\n\t // TODO\r\n return -1;\r\n }\r\n \r\n} "
   ],
   "answer":"package collections;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Collections;\r\n\r\n/**\r\n * This class represents a bag of integers. A bag can contain duplicate elements.\r\n * The bag is not limited in the number of elements it can hold.\r\n * The number of elements in the bag is represented by its length. \r\n\r\n * External invariant:\r\n * @inv Number of elements >= 0\r\n */\r\n\r\npublic class Bag {\r\n \r\n // Internal invariant\r\n // @inv elementen.size() >= 0 \r\n private ArrayList<Integer> elements;\r\n \r\n\r\n /**\r\n * @desc Constructor \r\n * @sub Happy path {\r\n * @requires true\r\n * @ensures A new bag is instantiated, with length = 0. \r\n * }\r\n */\r\n public Bag() {\r\n\t // TODO\r\n }\r\n \r\n /**\r\n * @desc add an elem to the bag\r\n * @param elem the element to add \r\n * @sub happy path {\r\n * @requires true\r\n * @ensures new cardinality(eleml) = old cardinality(elem) + 1\r\n * @ensures the new length of the bag is the old length plus 1\r\n * @ensures returns true \r\n * }\r\n */\r\n public boolean add(int elem) {\r\n\t // TODO\r\n return false;\r\n }\r\n \r\n /**\r\n * @desc Remove elemet elem from the bag\r\n * @param elem the element to remove\r\n * @sub Happy-path {\r\n * @requires length > 0 and the bag contains n elements of elem, with n > 0\r\n * @ensures new cardinality(elem) = old cardinality(elem) - 1\r\n * @ensures length is old length minus 1\r\n * @ensures returns true\r\n * }\r\n * @sub Non-happy-path {\r\n * @requires length = 0 or the bag does not contain element elem\r\n * @ensures the bag is not changed\r\n * @ensures length is old length\r\n * @ensures returns false\r\n * }\r\n */\r\n public boolean remove(int elem) {\r\n\t // TODO\r\n return false;\r\n }\r\n \r\n /**\r\n * @desc Return the number of elements in the bag\r\n * @sub {\r\n * @requires true \r\n * @ensures returns the number of elements\r\n * } \r\n */\r\n public int length() {\r\n\t // TODO\r\n return -1;\r\n } \r\n \r\n /**\r\n * @desc Determine if this bag contains exactly the same elements as bag obj.\r\n * @param obj the other bag \r\n * @sub {\r\n * @requires true\r\n * @ensures true if they contain the same elements otherwise false\r\n * } \r\n */\r\n public boolean equals(Object obj) {\r\n\t // TODO\r\n return false;\r\n }\r\n \r\n \r\n /**\r\n * @desc Get all the elements in the bag\r\n * @sub {\r\n * @requires true\r\n * @ensures returns all the elements in the bag\r\n * } \r\n */\r\n public int[] getElems() {\r\n\t // TODO\r\n return new int[0];\r\n }\r\n \r\n /**\r\n * @desc Get the cardinality of element elem in the bag\r\n * @param elem the element to determine the cardinality for\r\n * @sub {\r\n * @requires true \r\n * @ensures returns the number of element elem in the bag\r\n */\r\n public int cardinality(int elem) {\r\n\t // TODO\r\n return -1;\r\n }\r\n \r\n} ",
   "mass":{
      "instructorResources":"qf:test.zip",
      "styleSelected":true,
      "semanticSelected":false,
      "coverageSelected":true,
      "classSelected":false,
      "metricsSelected":false,
      "syntax":{
         "level":"BEGINNER"
      },
      "coverage":{
         "feedback":[
            
         ],
         "showTestFailures":true,
         "showFullCoverageReport":false
      },
      "style":{
         "basisLevel":"INTERMEDIATE",
         "complexityLevel":"BEGINNER",
         "namesLevel":"BEGINNER",
         "classLength":-1,
         "methodLength":-1,
         "cyclomaticComplexity":-1,
         "fieldsCount":-1,
         "variableNamePattern":"[a-z][a-zA-Z0-9]*",
         "methodNamePattern":"[a-z][a-zA-Z0-9]*",
         "methodParameterNamePattern":"[a-z][a-zA-Z0-9]*",
         "classNamePattern":"[A-Z][a-zA-Z0-9_]*"
      }
   }
}