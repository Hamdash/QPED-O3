package eu.qped.java.checkers.design.ckjm;

import gr.spinellis.ckjm.CkjmOutputHandler;
import gr.spinellis.ckjm.ClassMetrics;
import lombok.Data;

import java.util.HashMap;
import java.util.Map;

import static eu.qped.java.checkers.design.ckjm.SaveMapResults.Metric.*;
/**
 * Class is used to handle the output generated by the checker.
 * The output is saved in a nested map {@link #outputMetrics}.
 *
 * @author Jannik Seus
 */
@Data
public class SaveMapResults implements CkjmOutputHandler {

    private final Map<String, Map<Metric, Double>> outputMetrics;

    @Override
    public void handleClass(String name, ClassMetrics c) {

        Map<Metric, Double> metricsForClass = new HashMap<>();

        metricsForClass.put(WMC, (double) c.getWmc());
        metricsForClass.put(DIT, (double) c.getDit());
        metricsForClass.put(NOC, (double) c.getNoc());
        metricsForClass.put(CBO, (double) c.getCbo());
        metricsForClass.put(RFC, (double) c.getRfc());
        metricsForClass.put(LCOM, (double) c.getLcom());
        metricsForClass.put(CA, (double) c.getCa());
        metricsForClass.put(CE, (double) c.getCe());
        metricsForClass.put(NPM, (double) c.getNpm());
        metricsForClass.put(LCOM3, c.getLcom3());
        metricsForClass.put(LOC, (double) c.getLoc());
        metricsForClass.put(DAM, c.getDam());
        metricsForClass.put(MOA, (double) c.getMoa());
        metricsForClass.put(MFA, c.getMfa());
        metricsForClass.put(CAM, c.getCam());
        metricsForClass.put(IC, (double) c.getIc());
        metricsForClass.put(CBM, (double) c.getCbm());
        metricsForClass.put(AMC, c.getAmc());

        outputMetrics.put(name, metricsForClass);
    }

    /**
     * Metrics enum representing all possible class metrics for the design checker.
     *
     * defaultValue contains an initializing value for a specific metric (before setting the value)
     * defaultThreshold[0] contains the default minimum threshold
     * defaultThreshold[1] contains the default maximum threshold
     *
     * @author Jannik Seus
     */
    public enum Metric {

        AMC("Average Method Complexity", 0d, new double[]{}),
        CAM("Cohesion Among Methods of Class", 0d, new double[]{}),
        CA("Afferent coupling", 0d, new double[]{}),
        CBM("Coupling Between Methods", 0d, new double[]{}),
        CBO("Coupling between object classes", 0d, new double[]{}),
        CC("McCabe's Cyclomatic Complexity", 1d, new double[]{}),
        CE("Efferent coupling", 0d, new double[]{}),
        CIS("Class Interface Size", 0d, new double[]{}),
        DAM("Data Access Metric", 0d, new double[]{}),
        DIT("Depth of inheritance tree", 0d, new double[]{}),
        IC("Inheritance Coupling", 0d, new double[]{}),
        LCOM("Lack of cohesion in methods", 0d, new double[]{}),
        LCOM3("Lack of cohesion in methods Henderson-Sellers version", 0d, new double[]{}),
        LOC("Lines of Code", 0d, new double[]{}),
        MOA("Measure of Aggregation", 0d, new double[]{}),
        MFA("Measure of Functional Abstraction", 0d, new double[]{}),
        NOC("Number of Children", 0d, new double[]{}),
        NPM("Number of Public Methods for a class", 0d, new double[]{}),
        RFC("Response for a Class", 0d, new double[]{}),
        WMC("Weighted methods per class", 0d, new double[]{});

        /**
         * Represents a metric's description.
         */
        private final String description;

        /**
        A metric's value to begin with. This is not representing a field to store the data.
         */
        private final double initialValue;

        /**
         * TODO look up thresholds in paper "Thresholds for object-oriented measures"
         * Represents default thresholds (min, max) of given metrics.
         */
        private final double[] defaultThresholds;

        Metric(String description, double initialValue, double[] defaultThresholds) {
            this.description = description;
            this.initialValue = initialValue;
            this.defaultThresholds = defaultThresholds;
        }

        public String getDescription() {
            return description;
        }

        public double getInitialValue() {
            return initialValue;
        }

        public double[] getDefaultThresholds() {
            return defaultThresholds;
        }
        public double getDefaultThresholdMin() {
            return defaultThresholds[0];
        }
        public double getDefaultThresholdMax() {
            return defaultThresholds[1];
        }
    }

    public static void main(String[] args) {
        Metric m = IC;
        System.out.print(m.getDefaultThresholds().length + "\t" + m.getInitialValue() + "\t" + m.getDescription() + "\t");
    }
}
